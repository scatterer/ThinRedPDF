diff -uNr a/@xmltree/find.m b/@xmltree/find.m
--- a/@xmltree/find.m
+++ b/@xmltree/find.m
@@ -109,7 +109,7 @@
 	j = 1;
 	while j <= length(i)
 		%- Look for recursion '//'
-		if j<length(i) & i(j+1)==i(j)+1
+		if j<length(i) && i(j+1)==i(j)+1
 			recursive = 1;
 			j = j + 1;
 		else
diff -uNr a/@xmltree/private/xml_findstr.c b/@xmltree/private/xml_findstr.c
--- a/@xmltree/private/xml_findstr.c
+++ b/@xmltree/private/xml_findstr.c
@@ -14,7 +14,7 @@
 */
 
 /* Comment the following line to use standard mxGetString (slower) */
-#define __HACK_MXCHAR__
+/*#define __HACK_MXCHAR__ Octave-3.2.4 uses uint8/char (byte) to store strings */
 
 void mexFunction(int nlhs, mxArray *plhs[], int nrhs, const mxArray *prhs[]) {
 
@@ -39,7 +39,7 @@
 	if (!mxIsChar(prhs[0]))
 	    mexErrMsgTxt("Inputs must be character arrays.");
 	stext = mxGetM(prhs[0]) * mxGetN(prhs[0]);
-#ifdef __HACK_MXCHAR__
+#if defined (__HACK_MXCHAR__) || defined (HAVE_OCTAVE)
 	text = mxGetData(prhs[0]);
 #else
     text = mxCalloc(stext+1, sizeof(char));
@@ -50,7 +50,7 @@
 	if (!mxIsChar(prhs[1]))
 		mexErrMsgTxt("Inputs must be character arrays.");
     spattern = mxGetM(prhs[1]) * mxGetN(prhs[1]);
-#ifdef __HACK_MXCHAR__
+#if defined (__HACK_MXCHAR__) || defined (HAVE_OCTAVE)
 	pattern = mxGetData(prhs[1]);
 #else
     pattern = mxCalloc(spattern+1, sizeof(char));
@@ -79,7 +79,8 @@
             if (pattern[j] == text[i+j]) {
                 if (j == spattern-1) {
                     nbmatch += 1;
-                    k = mxRealloc(k,nbmatch*sizeof(unsigned int));
+                    //k = (unsigned int*)realloc((void*)k,nbmatch*sizeof(unsigned int));
+		    k = mxRealloc(k,nbmatch*sizeof(unsigned int));
                     k[nbmatch-1] = i+1;
                     if (++occur == nboccur) i = stext;
                 }
@@ -99,5 +100,10 @@
     plhs[0] = out;
     
     /* Free memory */
-    if (k) mxFree(k);
+    //if (k) free((void*)k);
+#if defined (HAVE_OCTAVE)
+    mxRealloc(k,0);
+#else
+    mxFree(k);
+#endif
 }
diff -uNr a/@xmltree/private/xml_parser.m b/@xmltree/private/xml_parser.m
--- a/@xmltree/private/xml_parser.m
+++ b/@xmltree/private/xml_parser.m
@@ -111,7 +111,7 @@
 error(nargchk(1,1,nargin));
 if isempty(xmlstr)
 	error('[XML] Not enough parameters.')
-elseif ~isstr(xmlstr) | sum(size(xmlstr)>1)>1
+elseif ~ischar(xmlstr) || sum(size(xmlstr)>1)>1
 	error('[XML] Input must be a string.')
 end
 
@@ -175,11 +175,11 @@
 				%- Processing instruction
 				frag = tag_pi(frag);
 			else
-				if length(xmlstring)-frag.str>4 & strcmp(xmlstring(frag.str+1:frag.str+3),'!--')
+				if length(xmlstring)-frag.str>4 && strcmp(xmlstring(frag.str+1:frag.str+3),'!--')
 					%- Comment
 					frag = tag_comment(frag);
 				else
-					if length(xmlstring)-frag.str>9 & strcmp(xmlstring(frag.str+1:frag.str+8),'![CDATA[')
+					if length(xmlstring)-frag.str>9 && strcmp(xmlstring(frag.str+1:frag.str+8),'![CDATA[')
 						%- Litteral data
 						frag = tag_cdata(frag);
 					else
@@ -417,5 +417,5 @@
    
 %-----------------------------------------------------------------------
 function str = erode(str)
-	if ~isempty(str) & str(1)==' ' str(1)=''; end;
-	if ~isempty(str) & str(end)==' ' str(end)=''; end;
+	if ~isempty(str) && str(1)==' ' str(1)=''; end;
+	if ~isempty(str) && str(end)==' ' str(end)=''; end;
diff -uNr a/@xmltree/xmltree.m b/@xmltree/xmltree.m
--- a/@xmltree/xmltree.m
+++ b/@xmltree/xmltree.m
@@ -38,13 +38,24 @@
 				tree.tree = xml_parser(varargin{1});
 				tree.filename = '';
 			% Input argument is an XML filename
-			else
-				fid = fopen(varargin{1},'rt');
-				if (fid == -1) 
-					error(['[XMLTree] Cannot open ' varargin{1}]);
-				end
-				xmlstr = fscanf(fid,'%c');
-				fclose(fid);
+            else
+                %xmlstr = fscanf(fid,'%c'); - fscanf - problems with
+                % conversion of non-ascii chars in Octave,
+                % other methods (fgets, fgetl) - slow
+                tic();
+                if ~exist('OCTAVE_VERSION'), %#ok<EXIST>
+                    fid = fopen(varargin{1},'rt');
+                    if (fid == -1) 
+                        error(['[XMLTree] Cannot open ' varargin{1}]);
+                    end
+                    xmlstr = fscanf(fid,'%c');
+                    fclose(fid);
+                else
+                    [s,xmlstr] = system(['cat ' varargin{1}]);
+                    if s~=0,
+                        error(['[XMLTree] Cannot open ' varargin{1}]);
+                    end
+                end
 				tree.tree = xml_parser(xmlstr);
 				tree.filename = varargin{1};
 			end
